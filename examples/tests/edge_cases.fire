// Edge case tests (should compile and run)
// Covers: empty arrays, nested scopes, mixed numeric promotions, compound assignments, increment/decrement,
// while loops with zero iterations, if without else, function returning array, function with array params

print("-- edge: fixed-size array basics --");
int32[] simple = [1, 2];
print(simple[0]);
print(simple.length());

print("-- edge: nested scopes deep variable access --");
int32 base = 5;
{
    int32 a = base + 1;
    {
    int32 b = a + 1;
        {
            int32 c = b + 1; // chain
            print(c); // expect 8
        }
    }
}

print("-- edge: numeric same-type arithmetic --");
int32 i = 2;
float32 f = 3.0f;
float64 dd = 4.0;
// Only same-type arithmetic is allowed; demonstrate valid cases
print(i + 5); // int32
print(f + 2.0f); // float32
print(dd + 1.0); // float64

print("-- edge: compound assignments and inc/dec --");
int32 cx = 10;
// simple compound (ensuring parser accepts it)
cx += 5;
cx -= 3;
cx *= 2;
cx /= 3;
cx %= 4;
print(cx); // final value just for exercise

int32 counter = 0;
counter++;
counter++;
counter--;
print(counter);

print("-- edge: while loop zero iterations --");
int32 limit = 0;
while (limit < 0) { // should not execute (int32 < int32 is valid)
    print("UNREACHABLE");
}
print("loop skipped");

print("-- edge: functions (no array params/returns) --");
int32 add2(int32 x, int32 y) {
    return x + y;
}
print(add2(10, 11)); // 21

print("-- edge: method argument type mismatch is not here (all valid) --");
int32[] seq = [99,2,3];
print(seq[0]); // 99

print("-- edge: array access expression in arithmetic --");
int32 x = seq[0] + 1; // tests ARRAY_ACCESS inside expression
print(x);

print("-- edge: equality and relational chaining separately --");
print( (1 + 2) == 3 );
print( (1 + 2) > 2 );
print( (1 + 2) < 5 );

print("-- edge: reuse variable with new array --");
int32[] seq2 = [42];
print(seq2[0]);

print("-- edge: avoid empty array literals in fixed-size mode --");

print("-- edge cases complete --");
