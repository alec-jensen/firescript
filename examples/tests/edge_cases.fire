// Edge case tests (should compile and run)
// Covers: empty arrays, nested scopes, mixed numeric promotions, compound assignments, increment/decrement,
// while loops with zero iterations, if without else, function returning array, function with array params

print("-- edge: empty int array literal used immediately --");
int32[] empty = [];
// append then pop to ensure methods on previously empty array
empty.append(1);
print(empty.pop());

print("-- edge: nested scopes deep variable access --");
int32 base = 5;
{
    int32 a = base + 1;
    {
    int32 b = a + 1;
        {
            int32 c = b + 1; // chain
            print(c); // expect 8
        }
    }
}

print("-- edge: numeric same-type arithmetic --");
int32 i = 2;
float32 f = 3.0f;
float64 dd = 4.0;
// Only same-type arithmetic is allowed; demonstrate valid cases
print(i + 5); // int32
print(f + 2.0f); // float32
print(dd + 1.0); // float64

print("-- edge: compound assignments and inc/dec --");
int32 cx = 10;
// simple compound (ensuring parser accepts it)
cx += 5;
cx -= 3;
cx *= 2;
cx /= 3;
cx %= 4;
print(cx); // final value just for exercise

int32 counter = 0;
counter++;
counter++;
counter--;
print(counter);

print("-- edge: while loop zero iterations --");
int32 limit = 0;
while (limit < 0) { // should not execute (int32 < int32 is valid)
    print("UNREACHABLE");
}
print("loop skipped");

print("-- edge: function returning array and array param --");
int32[] build(int32 n) {
    int32[] arr = [n, n+1];
    return arr;
}

int32 sum2(int32[] vals) {
    int32 a0 = vals[0];
    int32 a1 = vals[1];
    return a0 + a1;
}

int32[] made = build(10);
print(sum2(made)); // expect 21

print("-- edge: method argument type mismatch is not here (all valid) --");
int32[] seq = [1,2,3];
seq.insert(0, 99);
print(seq[0]); // 99

print("-- edge: array access expression in arithmetic --");
int32 x = seq[0] + 1; // tests ARRAY_ACCESS inside expression
print(x);

print("-- edge: equality and relational chaining separately --");
print( (1 + 2) == 3 );
print( (1 + 2) > 2 );
print( (1 + 2) < 5 );

print("-- edge: clear then reuse array --");
seq.clear();
seq.append(42);
print(seq[0]);

print("-- edge: empty array literal passed as arg (should have undetermined type so skip) --");
// Currently empty literal type inference returns None; avoid direct invalid usage; just ensure it's declared with explicit type above.

print("-- edge cases complete --");
