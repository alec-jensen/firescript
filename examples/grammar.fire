// Single line comment

/*
Multi
line
comment
*/

/*
    Philosophy of firescript

    Static typing is better than dynamic
    Explicit is better than implicit
    Code should be self explanatory
    Code should be easy to read
    Code should be easy to write
    Performance is important and should be easy to achieve
*/

/*
    Operators

    Arithmetic

        +   Addition
        +=  Addition assignment
        ++  Increment
        -   Subtraction
        -=  Subtraction assignment
        --  Decrement
        *   Multiplication
        *=  Multiplication assignment
        /   Division
        /=  Division assignment
        %   Modulus
        %=  Modulus assignment
        **  Exponentiation
        **= Exponentiation assignment

    Assignment

        =   Assignment

    Logic

        ==  Equality
        !=  Inequality
        >   Greater than
        >=  Greater than or equal to
        <   Less than
        <=  Less than or equal to
        &&  Logical and
        ||  Logical or
        !   Logical not
*/

// Variables

// Types are: int, float, double, bool, string, char, tuple, T

int a = 10;
float b = 10.5;
double c = 10.5;
bool d = true; // or false
string e = "Hello";
tuple<int, string> t = (10, "Hello");
T f = 10; // T is a generic type

int g; // variables can be declared without being initialized, but must be initialized before use.
g = 10; // now g is initialized and can be used

// Arrays

// Arrays in firescript are different from other languages
// They are very similar to Python's lists
// They do not have a fixed size
// They can not, however, contain different types than the type they are declared with

int[] arr = {1, 2, 3, 4, 5}; // arrays can contain any type, and are mutable. fixed length
int[] arr2 = new int[]; // create an array

// Arrays can be accessed using the index operator
arr[0] = 10; // set the first element to 10
int firstElement = arr[0]; // get the first element

// If the index is negative, it will start from the end of the array
int lastElement = arr[-1]; // get the last element

// Arrays can be sliced using the slice operator
// [start:end:step]
// start defaults to 0, end defaults to the length of the array, step defaults to 1
// If start is negative, it will start from the end of the array
// If end is negative, it will end from the end of the array
int[] sliced = arr[0:2]; // get the first two elements
int[] sliced2 = arr[2:]; // get all elements from the third element
int[] sliced3 = arr[:2]; // get the first two elements
int[] sliced4 = arr[0:2:2]; // get the first two elements with a step of 2
int[] reversed = arr[::-1]; // reverse the array

// Array methods

// append - add an element to the end of the array
arr.append(10);

// insert - insert an element at a specific index
arr.insert(0, 10);

// remove - remove an element from the array
arr.remove(10);

// pop - remove an element at a specific index
arr.pop(0);

// clear - remove all elements from the array
arr.clear();

// length - get the length of the array
int length = arr.length;

// index - get the index of an element
int index = arr.index(10);

// count - count the number of occurrences of an element
int count = arr.count(10);

// sort - sort the array
arr.sort();

// null, void, and other runtime constants

// null is the default value for nullable variables
// void is the return type of methods that do not return anything
// true and false are the boolean constants

// Variables can be nullable or non-nullable by adding the "nullable" keyword
// By default, variables are non-nullable unless otherwise specified
// This works for all types, including arrays

nullable int f = null; // nullable
int g = 10; // non-nullable

// To make a variable constant, add the "const" keyword. Constants must be initialized when declared and cannot be changed.

const int h = 10;

// If a constant is an object, the object itself is constant, but the object's properties can be changed (unless they are also constant)

const Object obj = new Object();

obj.property = 10; // This is allowed

obj = new Object(); // ConstantAssignmentError: Cannot assign to a constant

// Strings

// This system takes heavily after Python's string system

// Formatted strings

string name = "John";
string someString = f"Hello, {name}"; // By putting `f` in front of a string, you can insert expressions into the string using {expression}

// Raw strings

string rawString = r"Hello, \n World"; // By putting `r` in front of a string, you can create a raw string that does not interpret escape characters

// Byte strings

byte[] byteString = b"Hello, World"; // Byte strings are arrays of bytes. They are immutable

// Combining string prefixes

string formattedRawString = rf"Hello, {name} \n World"; // You can combine string prefixes
string rawByteString = rb"Hello, \n World"; // You can combine string prefixes
string formattedRawByteString = rfb"Hello, {name} \n World"; // You can combine string prefixes

// Type conversion
// firescript provides some functions to convert between types
// toInt(), toFloat(), toDouble(), toBool(), toString(), toChar()

int a = toInt(10.5); // a will be 10
float b = toFloat(10); // b will be 10.0
double c = toDouble(10); // c will be 10.0
bool d = toBool(0); // d will be false
string e = toString(10); // e will be "10"
char f = toChar("A"); // f will be 'A'

int g = toInt("10"); // g will be 10
float h = toFloat("10.5"); // h will be 10.5
double i = toDouble("10.5"); // i will be 10.5
bool j = toBool("true"); // j will be true
char k = toChar("A"); // k will be 'A'

// Type checking
// firescript provides the typeof() function to check the type of a variable
// This is useful for generic types

// Logic structures

// Scopes

// Scopes are defined by curly braces

{
    // do something
}

// Variables declared inside a scope are only accessible inside that scope and any nested scopes

{
    int a = 10;

    {
        print(a); // This will print 10
        int b = 20;
    }

    print(b); // This will throw an error
}

// If statements

if (true)
{
    // do something
}
else if (true)
{
    // do something else
}
else
{
    // do something else
}

// Loops

// For loops

for (int i = 0; i < 10; i++)
{
    if (i == 5)
    {
        continue; // skip to next iteration
    }

    if (i == 8)
    {
        break; // break out of loop
    }
}

for (int i : {"cat", "dog"}) // iterate over each element in the array
{
    // do something
}

// Range loops

// Range in firescript is most similar to python's range function
// Range is a generator, so it does not create an array in memory

for (int i : range(10)) // iterate over range 0-10, exclusive
{
    // do something
}

// range(int end)
// start defaults to 0, step defaults to 1, inclusive defaults to false

// range(int start, int end)
// step defaults to 1, inclusive defaults to false

// range(int start, int end, int step)
// inclusive defaults to false

// range(int start, int end, int step, bool inclusive)

// While loops

while (true)
{
    // do something
}

// Loop control statements

// break - break out of the loop
// continue - skip to the next iteration of the loop

// Methods

void printHello()
{
    print("Hello");
}

int add(int a, int b)
{
    return a + b;
}

// Nullable methods and parameters
// Nullable parameters must be the last parameters in the method. Required parameters cannot follow nullable parameters

nullable int add(int a, nullable int b, nullable int c) // b & c are optional. If not provided, they will be null
{
    if (b == null)
    {
        return null; // since the method is nullable, it can return null
    }

    return a + b;
}

// Nested methods

int add(int a, int b)
{
    int add(int c, int d)
    {
        return c + d;
    }

    return add(a, b);
}

// Calling a method with optional parameters

add(10, 10); // The parameters will be assigned in order

add(10, c=10); // The parameters can be assigned by name

// Classes

class Person
{
    // Define class variables
    string name;
    nullable int age;

    // `this` is the class instance. It is passed as the first argument to all constructors and non-static methods
    // it can be called whatever you want, but `this` is the convention
    Person(this, string name, int age)
    {
        this.name = name;
        this.age = age;
    }

    // Constructors can be overloaded

    Person(this, string name)
    {
        this.name = name;
    }

    // Methods can also be overloaded

    string set(this, string name)
    {
        this.name = name;
    }

    string set(this, int age)
    {
        this.age = age;
    }

    string getName(this)
    {
        return this.name;
    }

    int getAge(this)
    {
        return this.age;
    }

    // Static methods
    // Static methods can be called without an instance of the class

    static string getHello()
    {
        return "Hello";

        // Example of calling a static method
        string hello = Person.getHello();
    }

    // Static variables

    static string hello = "Hello";
}

// Inheritance

class Student from Person
{
    string school;

    Student(this, string name, int age, string school)
    {
        super.Student(name, age); // Call the parent constructor. super is the parent instance

        this.school = school;
    }

    string getSchool(this)
    {
        return this.school;
    }
}

Person john = new Person("John", 20);
Student jane = new Student("Jane", 18, "School");

// Conditional property access

// You can use the `?` operator to access properties of nullable objects
// If the object is null, the property will be null
// This is a safer and easier way to access properties of nullable objects

nullable Person person = null;

string name = person?.name; // If person is null, name will be null
string age = person.age; // This will throw an error

// Ternary operator

// The ternary operator is a shorthand for an if-else statement
// Ternary operators in firescript are different from other languages
// The syntax is `ternary condition then value1 else value2`
// This syntax is more readable and easier to understand than the traditional ternary operator

int a = 10;
int b = 20;

int c = ternary a > b then a else b; // c will be 20

// Generators

// TODO: Create generator syntax

//        COMPILER WARNINGS

bool a = true;
if (a = true)
{
    // This gives a warning "Assignment in if statement" because it is likely a mistake
}